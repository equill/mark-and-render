README for mark-and-render

Basic package for parsing and rendering either wiki-style or s-expr markup into HTML. Designed to be extensible via render macros.

The internal protocol is nice and simple: the parser turns its input into the kind of AST as one would find from READing an s-expression, and the renderer takes that AST and turns it into HTML.

Two styles of markup:
- wikimarkup, at least one variety thereof
- s-expressions

Exported symbols:
- parse-wikimarkup (probably the only one you'll use)
- valid-markup-p
- escape-string
- render-multiple-sexprs
- emit-html-to-string))

(parse-wikimarkup) takes a string of wikimarkup, and returns a string containing the resulting HTML.
(render-multiple-sexprs) does similar for a string containing one or more units of sexpr (lisp-style) markup.

escape-string takes a string and replaces characters of concern with the equivalent HTML entities.

Wikimarkup currently supported:
- *boldface*
- _italic_
- [display text|hyperlink]
- unordered lists
-- nested unordered lists (only one level of nesting is currently supported)
- {pre}Preformatted blocks, spanning multiple lines{/pre}
- {code}Code blocks{/code} - these can span lines, but the browser will render it as a single line
- h1. Header lines, created by beginning the line with a string of the form, "h1. " (note the space between the dot and the following text)

There's a basic example of the extensibility in the form of the :link function in the renderer, but a more generally useful means of inserting macro tags is available.
The basic approach is:
- insert an entry into the *macro-hash* hash-table, where the key is the macro's tag-name (e.g. :macro-name) and where the value is a function which accepts a string of text and returns valid HTML
- invoke it via {macro-name}content to be processed{/macro-name} (note the leading forward-slash in the close-tag. Yes, this is exactly how the {pre} and {code} markup is done now, it's just that unrecognised tags get passed straight on through, for the browser to figure out.

There's also a basic test suite, using the Fiveam framework:
(asdf:load-system :mark-and-render-tests)
(eos:run! 'mark-and-render-tests:m-a-r)

License: LLGPL.
The spirit is basically thus: if you leave the code intact or modify it and use that yourself, use it as you will. If you write something proprietary that calls on it, that's OK. If you swipe smallish chunks of it, please give credit where it's due. If you extend it and release the results, that must also be under the LLGPL.
